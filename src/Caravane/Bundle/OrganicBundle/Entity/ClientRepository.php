<?php

namespace Caravane\Bundle\OrganicBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends EntityRepository
{

	public function listAll($type=null,$ob=null,$page=1,$offset=25) {
		$dql = "SELECT C FROM CaravaneOrganicBundle:Client C ";
		$dql.=" WHERE C.public=1 ";
		if($type) {
			switch($type) {
				case 'owner':
					$dql.=" AND SIZE(C.tents) > 0 ";
				break;
				case 'renter':
					$dql.=" AND SIZE(C.tents) = 0 ";
				break;

				default:
					$dql.=" AND C.clienttype='".$type."' ";
				break;
			}

		}
		if($ob) {
			$dql.=" ORDER BY C.".$ob." ";
		}

		$query = $this->getEntityManager()->createQuery($dql)
                       ->setFirstResult(($page-1)*$offset)
                       ->setMaxResults($offset);

		$entities = new Paginator($query, $fetchJoinCollection = true);


		//return array('entities'=>$paginator);
		return $entities;
	}

	public function autocomplete($keyword,$controller,$type=null) {

		$query = $this->getEntityManager()->createQuery("
			SELECT C FROM CaravaneOrganicBundle:Client C
			WHERE LOWER(C.name) LIKE ?1
			OR LOWER(C.firstname) LIKE ?1
			OR LOWER(C.lastname) LIKE ?1
			OR LOWER(C.vat) LIKE ?1
			ORDER BY C.name,C.lastname,C.firstname"
		);
		$query->setParameter(1,  '%'.strtolower($keyword).'%');

		$result=$query->getResult();
		$clients=array();
		foreach($result as $client) {
			if(!$name=$client->getName()) {
				$name=$client->getFirstname()." ".$client->getLastname();
			}
			/*if($client->getvat()) {
				$name.=" (".$client->getVat().")";
			}*/
			switch($type) {
				default:
					$clients[]="<li class='client'>cli <a href=\"".$controller->generateUrl('client_edit',array('id'=>$client->getId()))."\" >".$name."</a></li>";

				break;
				case 'json':
					$clients[]=array('type'=>'contact','value'=>$client->getId(),"label"=>$name, "listName"=>$name." (".$client->getVat().")");
				break;
			}
			//
					}
		switch($type) {
			default:
				return $clients;
			break;
			case 'json':
				return json_encode($clients);
			break;
		}

	}



}
